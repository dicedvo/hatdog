import { supabase } from './supabase'
import { Task, TeamMember, Project, Organization } from '@/types'

// Organizations API
export const organizationsAPI = {
  // Get organization by ID
  async getById(id: string): Promise<Organization> {
    const { data, error } = await supabase
      .from('organizations')
      .select('*')
      .eq('id', id)
      .single()
    
    if (error) throw error
    return data
  },

  // Get organization by invite code
  async getByInviteCode(inviteCode: string): Promise<Organization> {
    const { data, error } = await supabase
      .from('organizations')
      .select('*')
      .eq('invite_code', inviteCode)
      .single()
    
    if (error) throw error
    return data
  },

  // Create organization
  async create(name: string, userId: string): Promise<Organization> {
    const { data, error } = await supabase
      .from('organizations')
      .insert({
        name,
        created_by: userId,
        invite_code: '' // Will be auto-generated by trigger
      })
      .select()
      .single()
    
    if (error) throw error
    return data
  },

  // Get user's organization
  async getUserOrganization(userId: string): Promise<Organization | null> {
    const { data, error } = await supabase
      .from('team_members')
      .select('organization_id')
      .eq('user_id', userId)
      .single()
    
    if (error) return null
    if (!data?.organization_id) return null

    return this.getById(data.organization_id)
  }
}

// Team Members API
export const teamAPI = {
  // Get all active team members
  async getAll(): Promise<TeamMember[]> {
    const { data, error } = await supabase
      .from('team_members')
      .select('*')
      .eq('is_active', true)
      .order('name')
    
    if (error) throw error
    return data || []
  },

  // Create new team member
  async create(member: Omit<TeamMember, 'id' | 'created_at' | 'updated_at'>): Promise<TeamMember> {
    console.log('Creating team member:', member);
    const { data, error } = await supabase
      .from('team_members')
      .insert(member)
      .select()
      .single()
    
    if (error) {
      console.error('Error creating team member:', error);
      throw error;
    }
    console.log('Team member created:', data);
    return data
  },

  async delete(id: string): Promise<void> {
    const { error } = await supabase
      .from('team_members')
      .delete()
      .eq('id', id)
    
    if (error) throw error
  }
}

// Tasks API
export const tasksAPI = {
  // Get all tasks with assignee info
  async getAll(): Promise<Task[]> {
    const { data, error } = await supabase
      .from('tasks')
      .select(`
        *,
        assignee:team_members(*)
      `)
      .order('position')
    
    if (error) throw error
    return data || []
  },

  // Create new task
  async create(task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>): Promise<Task> {
    console.log('Creating task:', task);
    const { data, error } = await supabase
      .from('tasks')
      .insert(task)
      .select(`
        *,
        assignee:team_members(*)
      `)
      .single()
    
    if (error) {
      console.error('Error creating task:', error);
      throw error;
    }
    console.log('Task created:', data);
    return data
  },

  // Update task
  async update(id: string, updates: Partial<Task>): Promise<Task> {
    const { data, error } = await supabase
      .from('tasks')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select(`
        *,
        assignee:team_members(*)
      `)
      .single()
    
    if (error) throw error
    return data
  },

  // Delete task
  async delete(id: string): Promise<void> {
    const { error } = await supabase
      .from('tasks')
      .delete()
      .eq('id', id)
    
    if (error) throw error
  },

  // Update task position and status (for drag and drop)
  async updatePosition(id: string, status: string, position: number): Promise<Task> {
    const { data, error } = await supabase
      .from('tasks')
      .update({ 
        status, 
        position, 
        updated_at: new Date().toISOString() 
      })
      .eq('id', id)
      .select(`
        *,
        assignee:team_members(*)
      `)
      .single()
    
    if (error) throw error
    return data
  }
}

// Projects API (for later)
export const projectsAPI = {
  async getAll(): Promise<Project[]> {
    const { data, error } = await supabase
      .from('projects')
      .select('*')
      .order('name')
    
    if (error) throw error
    return data || []
  }
}